---
name: Build and Inspect a Python Package
description: Builds the current package using standard PyPA tooling, keeps it as artifacts, then performs checks on it.
author: Hynek Schlawack
branding:
  icon: package
  color: purple

inputs:
  path:
    description: Where to look for the Python package to inspect.
    required: false
    default: .
outputs:
  dist:
    description: The location of the built packages.
    value: ${{ steps.setter.outputs.dist }}

runs:
  using: composite
  steps:
    - name: Resolve Lock Path
      shell: bash
      run: echo "PDM_CACHE=$(realpath ${{ github.action_path }}/pdm.lock)" >>$GITHUB_ENV

    - uses: pdm-project/setup-pdm@v3
      id: setup-pdm
      with:
        python-version: 3.x
        update-python: false
        cache: true
        cache-dependency-path: ${{ env.PDM_CACHE }}

    - name: Create venv for tools
      shell: bash
      run: |
        cd ${{ github.action_path }}

        pdm venv create --name baipp ${{ steps.setup-pdm.outputs.python-path }}
        pdm use --venv baipp
        pdm sync
        pdm info --json

    # Build SDist, then build wheel out of it.
    # Set 'SOURCE_DATE_EPOCH' based on the last commit for build
    # reproducibility.
    - run: |
        PROJECT=$(pwd)
        SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)

        pdm run -p ${{ github.action_path }} build --outdir /tmp/baipp/dist "$PROJECT"
      shell: bash
      working-directory: ${{ inputs.path }}

    - name: Set output
      id: setter
      shell: bash
      run: echo "dist=/tmp/baipp/dist" >>$GITHUB_OUTPUT

    # Give user overview over what we've built.
    - run: ls -l /tmp/baipp/dist
      shell: bash
      working-directory: ${{ inputs.path }}

    - name: Upload built artifacts.
      uses: actions/upload-artifact@v3
      with:
        name: Packages
        path: /tmp/baipp/dist/*

    - run: pdm run -p ${{ github.action_path }} check-wheel-contents /tmp/baipp/dist/*.whl
      shell: bash
      working-directory: ${{ inputs.path }}

    - name: Check PyPI README
      shell: bash
      working-directory: ${{ inputs.path }}
      run: pdm run -p ${{ github.action_path }} check-readme /tmp/baipp/dist/*

    - name: Show wheel & SDist contents hierarchically, including metadata.
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        cd /tmp/baipp/dist
        mkdir -p out/sdist
        mkdir -p out/wheels

        pdm run -p ${{ github.action_path }} wheel unpack --dest /tmp/baipp/dist/out/wheels /tmp/baipp/dist/*.whl
        tar xf *.tar.gz -C out/sdist

        echo -e '\n<details><summary>SDist contents</summary>\n' >> $GITHUB_STEP_SUMMARY
        (cd /tmp/baipp/dist/out/sdist && tree -Da --timefmt="%Y-%m-%dT%H:%M:%SZ" * | sed 's/^/    /' | tee -a $GITHUB_STEP_SUMMARY)
        echo -e '\n</details>\n' >> $GITHUB_STEP_SUMMARY

        echo -e '\n<details><summary>Wheel contents</summary>\n' >> $GITHUB_STEP_SUMMARY
        (cd /tmp/baipp/dist/out/wheels && tree -Da --timefmt="%Y-%m-%dT%H:%M:%SZ" * | sed 's/^/    /' | tee -a $GITHUB_STEP_SUMMARY)
        echo -e '\n</details>\n' >> $GITHUB_STEP_SUMMARY

        echo ----- Metadata Follows -----
        echo -e '\n<details><summary>Metadata</summary>\n' >> $GITHUB_STEP_SUMMARY
        cat out/sdist/*/PKG-INFO | sed 's/^/    /' | tee -a $GITHUB_STEP_SUMMARY
        echo -e '\n</details>\n' >> $GITHUB_STEP_SUMMARY
        echo ----- End of Metadata  -----

    - name: Upload metadata
      uses: actions/upload-artifact@v3
      with:
        name: Package Metadata
        path: /tmp/baipp/dist/out/sdist/*/PKG-INFO

    - name: Extract PyPI README
      shell: bash
      working-directory: /tmp/baipp/dist/out/sdist/
      run: |
        cat */PKG-INFO | ${{ steps.setup-pdm.outputs.python-path }} -c '
        import email.parser
        import sys

        em = email.parser.Parser().parsestr(sys.stdin.read())
        suffix = {
            "text/markdown": "md",
            "text/x-rst": "rst",
        }[em["Description-Content-Type"]]
        with open(f"PyPI-README.{suffix}", "w") as f:
            f.write(em.get_payload())
        '

    - name: Upload PyPI README
      uses: actions/upload-artifact@v3
      with:
        name: PyPI README
        path: /tmp/baipp/dist/out/sdist/PyPI-README.*
